import * as Icons from "@heroicons/react/24/solid";
import { AnimatePresence, motion } from "framer-motion";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";

export default function Home() {
  const [open, setOpen] = useState<boolean>();
  const { width } = useWindowSize();
  const sidebarRef = useRef<HTMLDivElement>(null);

  const handleClick = (event: any) => {
    if (
      !(sidebarRef.current as any).contains(event.target) &&
      event.target.className === "nav-toggler"
    ) {
      setOpen(false);
    }
  };

  if (width && open === undefined) {
    setOpen(width >= 1024);
  }

  useEffect(() => {
    document.addEventListener("click", (event) => handleClick(event));
    return () => {
      document.removeEventListener("click", (event) => handleClick(event));
    };
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main-container">
        <div className="wrapper">
          <header className="nav-bar">
            <div className="pathname">
              <p>Projects</p>
              <p>/</p>
              <p>Customer Support</p>
            </div>

            <button className="nav-toggler" onClick={() => setOpen(!open)}>
              <Icons.Bars3Icon className="h-6 w-6" />
            </button>
          </header>
          <main>
            <div className="container">
              <h2>Customer Support</h2>
              {Array(20)
                .fill("")
                .map((pera, index) => (
                  <p key={index}>
                    Lorem ipsum dolor sit amet consectetur adipisicing elit.
                    Recusandae est asperiores eaque assumenda necessitatibus
                    sint labore? Ipsam consequuntur dolorem illo laudantium
                    velit, aliquid ut voluptas debitis officiis. Eligendi,
                    perspiciatis cum?
                  </p>
                ))}
            </div>
          </main>
        </div>
        <div ref={sidebarRef}>
          {width === undefined ? (
            <div className="sidebar-lg">
              <div className="sidebar-container">
                <Sidebar onClose={() => setOpen(false)} />
              </div>
            </div>
          ) : (
            <AnimatePresence initial={false}>
              {open && (
                <motion.div
                  variants={{
                    open: width >= 1024 ? { width: "auto" } : { x: "0%" },
                    closed: width >= 1024 ? { width: 0 } : { x: "100%" },
                  }}
                  initial="closed"
                  animate="open"
                  exit="closed"
                  transition={{ type: "spring", bounce: 0, duration: 0.3 }}
                  className="sidebar-container"
                >
                  <Sidebar onClose={() => setOpen(false)} />
                </motion.div>
              )}
            </AnimatePresence>
          )}
        </div>
      </div>
    </>
  );
}

const Sidebar = ({ onClose }: { onClose: () => void }) => {
  return (
    <div
      style={{
        display: "flex",
        justifyContent: "space-between",
        padding: "10px",
      }}
    >
      <p>Sidebar</p>
      <button className="close" onClick={onClose}>
        <Icons.XMarkIcon className="h-6 w-6" />
      </button>
    </div>
  );
};

const useWindowSize = () => {
  const [windowSize, setWindowSize] = useState<{
    width: number | undefined;
    height: number | undefined;
  }>({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }

    handleResize();

    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return windowSize;
};
